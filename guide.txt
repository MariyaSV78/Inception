1. Install VM with ssh + xfce (21- 1)
2. login root
3. apt update
4. apt install -y make, ufw
5. Install docker from a package: 
	-Download the necessary repositories for Debian from the official site Docker: https://docs.docker.com/engine/install/debian/ (Install from a package)
	-Install the .deb packages. Update the paths in the following example to where you downloaded the Docker packages.
	-Verify that the Docker Engine installation is successful by running the hello-world image:
		$ sudo service docker start
		$ sudo docker run hello-world
7. Go to non-root user: $ sudo reboot
8. Add new user to sudo group and docker's group to work with docker from user's account without sudo: 
	- $ sudo usermod -aG sudo login
	- $ sudo usermod -aG docker login
	- $ sudo reboot
	- $ sudo getent group name_group - for exam
9. -apt get install git
	-generate keygen for github: ssh-keygen -> cat /.ssh/id_rsa.pub
10. Edit nano /etc/hosts to add your server name to the list of host accepted: 127.0.0.1 login.42.fr
11. Install docker-compose:
	-sudo apt-get remove docker-compose;
	-sudo rm -f /usr/local/bin/docker-compose
	-sudo curl -L "https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	-sudo chmod +x /usr/local/bin/docker-compose
	-docker-compose --version;
12.	Create folder and files
	-guide (21 -4) without creating a file.sh

15. Creation of the Nginx container
	-creation Dockfile 
		-cd ~/project/srcs/requirements/nginx/;

		-nano Dockerfile (21-7.2);
		-#Generate a self-signed certificate
		RUN openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out /etc/ssl/llescure.42.fr.pem -keyout /etc/ssl/llescure.42.fr.key -subj "/C=FR/ST=Paris/L=Paris/O=42 School/OU=llescure/CN=llescure.42.fr"

	-creation nginx.conf
	
15a. Un container Docker doit être build avant d’être lancé.
	-docker build -t nginx .  (run the command from the folder where Dockerfile is located), -t <name:tag>
	-docker image ls
	-docker run -it <image_name>  - run the image: En précisant -it avant le nom de votre image, vous accéderez directement au terminal de votre container à son lancement.
	-exit
	-docker rmi <ID>
	-docker container ls -a
	-docker rm $(docker ps -aq)
	-docker run -p 443:443 <image_name>

!!! 
	docker stop $(docker ps -qa)
	docker rm $(docker ps -qa)
	docker rmi -f $(docker images -qa)
	docker volume rm $(docker volme ls -q)
	docker network rm $(docker network ls -q)

	sudo service docker restart

// 16. run container from docker-compose: //  http://www.yamllint.com/
	-docke-compose up -d

	17.  Creation of the MariaDB container; 
		- script qui configure base de données devrait lancer le container mariadb sans soucis.

	18.	 Creation of the WordPress container;
	19. VM - chmod -R 755 /home/msosnova/data/
	20. su - cd /var/lib/docker chmod -R 777 volume







 Commandes docker-compose
-docker-compose build 		- build, construction de l image
-docker-compose up 			- fait le build et le run
-docker-compose up -d 		-  "-d" comme detach, permet de garder le container actif meme si on sort du terminal

-docker-compose config		- check which values are assigned to the environment variables
-docker-compose ps 			- pour avoir l'etat des services
-docker-compose start	 	- on redemarre les services
-docker-compose stop		- on stop les services/containers
-docker-compose rm  		- suppression


Commandes docker (simples) importantes
-docker pull 				-pulls the docker image from dockerhub
-docker run	"name of the docker image"		-pulls and start the image/container
-docker run -d              -detach permet de continuer a travailler sur le terminal
			-p 				-option pour le port
docker ps -a 				-all containers not matter if they are running or not 

Restart a container if we made some changes

-docker images				-all the images you have locally
-docker start
-docker stop
-docker ps					-see all the running containers

#docker run -e POSTGRES_PASSWORD=password postgres:9.6 -Lancer une base de donnees postgreSQL